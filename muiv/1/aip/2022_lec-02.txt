Алгоритмизация и программирование

Лекция 2:
    Язык программирования Python

Отношение языка к машинному коду:
    - компилируемый
        - программа целиком переводится в м.к.
           перед выполнением
           + оптимизация при компиляции
           + сложные взаимноссылающиеся архитектуры
           - время компиляции
           - платформозависимость
           C/C++/C#/Java
    - интерпретируемый
        - программа переводится в м.к. "на лету"
        - программы запускаюится через интерпретатор
            + нет компиляции
            + платформонезависима (для каждой платформы
                есть интерпретатор)
            - меньше оптимизации
            - сложности с перескрёстными ссылками

    Python - интерпретируемый язык
        * динамичные форматы данных
            + возможны бесконечные целые числа
            + больше свободы в архитектуре
            - ниже производительность
            - больше бардака в коде

Базовый синтаксис Python
- оператор '='
    <имя> = <значение>
        - <имя> <= имя изменяемого/создаваемого объекта
        - <значение> <= новое значеие
    Правила выбора имён:
        - имя не может быть системным именем
        - все имена кроме классов начинаются с маленькой буквы
        - многосложные_имена_пишутся_так
        - имя не может начинаться с цифры
        - имя не может содержать знаков препинания кроме _
    Правила назначения:
        - назначать можно что угодно
        - НО есть мат. правила: нельзя делить на 0 итд.
            - ZeroDivisionError
        - тип данных переменной определяется по назначемому типу
        - все операции должны быть справа от '='
        - все операции выполняются ДО назначения
- вызов
    <название_вызываемого>(<может_быть_параметры>)
    пример: print(10, 20, "@@")
- свойства
    <объект>.<свойство>
    пример: "строка".__doc__
    большинство свойств являются вызываемыми (методы)
    пример: " :: ".join(10, 20, 30)
- арифметические операторы
    -<отрицаемое> <= оператор отрицания
    <оперируемое> <оператор> <операнд>
    пример: 5 + 2
    возможные операторы: + - * / // % **
    !!! результат работы оператора зависит от типов
    данных оперируемого и операнда !!!